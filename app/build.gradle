apply plugin: 'com.android.application'
apply plugin: 'org.jetbrains.kotlin.android'

android {
    namespace 'com.psiphon3.subscription'

    android.defaultConfig.vectorDrawables.useSupportLibrary = true

    repositories{
        maven {
            url "https://maven.google.com"
        }
    }

    def versionPropsFile = rootProject.file('version.properties')

    if (versionPropsFile.canRead()) {
        def Properties props = new Properties()

        props.load(new FileInputStream(versionPropsFile))
        if (props != null && props.containsKey('VERSION_CODE')) {
            def verName = props['VERSION_CODE']
            def verCode = verName.toInteger()

            defaultConfig {
                applicationId "com.psiphon3.subscription"
                resValue "string", "tray__authority", "${applicationId}.tray"
                // Override the app name for the Google Play Store
                resValue "string", "app_name", "Psiphon Pro"
                minSdkVersion 21 // Google Play Billing Library 7+ requires API level 21
                compileSdk 35
                targetSdkVersion 35
                versionCode verCode
                versionName verName
                testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
                multiDexEnabled true
                vectorDrawables.useSupportLibrary = true

                // tun2socks NDK build configuration
                externalNativeBuild {
                    ndkBuild {
                        cFlags "-DNDEBUG"
                    }
                }

                // Build type specific defaults below
                //
                // Specify non-null URL to override landing page from handshake
                buildConfigField "String", "STATIC_LANDING_PAGE_URL", "null"
                // Specify purchase verification environment, default is production
                buildConfigField "Boolean", "PURCHASE_VERIFIER_DEV_ENVIRONMENT", "false"
            }
        } else {
            throw new GradleException('version.properties found but entries are missing')
        }
    } else {
        throw new GradleException("Could not read version.properties!")
    }

    signingConfigs {
        release
    }

    // Configure output APK file name
    applicationVariants.configureEach { variant ->
        variant.outputs.configureEach { output ->
            def fileName = "PsiphonAndroid-${variant.buildType.name}.apk"
            output.outputFileName = fileName
        }
    }

    buildTypes {
        debug {
            debuggable true
            pseudoLocalesEnabled true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            debuggable false
            ndk {
                // ABI configurations of native libraries Gradle should package with the APK.
                abiFilters 'armeabi-v7a', 'arm64-v8a'
            }
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    def propFile = rootProject.file('signing.properties')
    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled true
    }

    buildFeatures {
        buildConfig true
        aidl true
    }

    if (propFile.canRead()) {
        def Properties props = new Properties()
        props.load(new FileInputStream(propFile))

        if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
                props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
            android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
            android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
            android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
            android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
        } else {
            throw new GradleException('signing.properties found but some entries are missing')
        }
    } else {
        throw new GradleException('signing.properties not found!')
    }

    // For android 14 support we have to use ndk r17c or lower
    ndkVersion '17.2.4988734'
    externalNativeBuild {
        ndkBuild {
            // Path to the tun2socks NDK build script
            path "src/main/jni/Android.mk"
        }
    }

    buildTypes.each {
        it.buildConfigField 'String', 'SUBSCRIPTION_SPONSOR_ID', getBuildProperty('SUBSCRIPTION_SPONSOR_ID')
        it.buildConfigField 'String', "CONDUIT_RUNNING_SPONSOR_ID", getBuildProperty('CONDUIT_RUNNING_SPONSOR_ID')
        it.buildConfigField 'String', 'IAB_PUBLIC_KEY', getBuildProperty('IAB_PUBLIC_KEY')

        // Set AdMob app ID and App Open ad unit ID for disconnected mode.
        it.buildConfigField 'String', 'APP_OPEN_DISCONNECTED_ID', getBuildProperty('APP_OPEN_DISCONNECTED_ID')
        it.manifestPlaceholders = [
                ADMOB_APP_ID: getBuildProperty('PRO_ADMOB_APP_ID').replaceAll("\"", "")
        ]
    }

    // Fix `More than one file found with OS dependent path' compilation error, see
    // https://issuetracker.google.com/issues/152898926 for more info.
    packagingOptions {
        exclude 'META-INF/*.kotlin_module'
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

def getBuildProperty(String propertyName) {
    def propsFile = rootProject.file('build.properties')
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        if(props != null && props.containsKey(propertyName)) {
            return props[propertyName];
        } else {
            return "";
        }
    } else {
        throw new GradleException('File \'build.properties\' is missing! Please copy \'build.properties.stub\' to \'build.properties\' and edit the values.')
    }
}

dependencies {
    implementation files('libs/jackson-core-2.2.0.jar')
    implementation files('libs/achartengine-1.0.0.jar')
    implementation files('libs/snakeyaml-1.10-android.jar')
    implementation files('libs/ca.psiphon.aar')
    implementation files('libs/jndcrash-release.aar')

    implementation project(':tray')

    implementation "androidx.multidex:multidex:$rootProject.ext.multidexVersion"
    implementation "androidx.appcompat:appcompat:$rootProject.ext.appcompatVersion"
    implementation "androidx.cardview:cardview:$rootProject.ext.cardviewVersion"
    implementation "com.google.android.material:material:$rootProject.ext.materialVersion"
    implementation "androidx.constraintlayout:constraintlayout:$rootProject.ext.constraintLayoutVersion"
    implementation "androidx.gridlayout:gridlayout:$rootProject.ext.gridlayoutVersion"
    implementation "androidx.recyclerview:recyclerview:$rootProject.ext.recyclerviewVersion"
    implementation "androidx.localbroadcastmanager:localbroadcastmanager:$rootProject.ext.localBroadCastManagerVersion"
    implementation "androidx.preference:preference:$rootProject.ext.preferenceVersion"


    implementation "io.reactivex.rxjava2:rxandroid:$rootProject.ext.rxandroidVersion"
    implementation "io.reactivex.rxjava2:rxjava:$rootProject.ext.rxjavaVersion"
    implementation "com.jakewharton.rxrelay2:rxrelay:$rootProject.ext.rxrelayVersion"
    implementation "com.squareup.okhttp3:okhttp:$rootProject.ext.okhttpVersion"
    implementation "com.android.billingclient:billing:$rootProject.ext.playStoreBillingClientVersion"

    api "androidx.lifecycle:lifecycle-viewmodel:$rootProject.ext.lifecycleViewModelVersion"
    implementation "androidx.lifecycle:lifecycle-common-java8:$rootProject.ext.lifecycleViewModelVersion"

    implementation "androidx.work:work-runtime:$rootProject.ext.workManagerVersion"
    implementation "androidx.work:work-rxjava2:$rootProject.ext.workManagerVersion"
    implementation "androidx.core:core-ktx:$rootProject.ext.coreKtxVersion"

    compileOnly "com.google.auto.value:auto-value:$rootProject.ext.autoValueVersion"
    annotationProcessor "com.google.auto.value:auto-value:$rootProject.ext.autoValueVersion"

    testImplementation "androidx.test.ext:junit:$rootProject.ext.junitVersion"
    testImplementation "org.mockito:mockito-core:$rootProject.ext.mockitoVersion"
    androidTestImplementation "org.mockito:mockito-android:$rootProject.ext.mockitoVersion"
    androidTestImplementation "androidx.test.ext:junit:$rootProject.ext.junitVersion"

    implementation "androidx.room:room-runtime:$rootProject.ext.roomVersion"
    annotationProcessor "androidx.room:room-compiler:$rootProject.ext.roomVersion"

    implementation "androidx.paging:paging-runtime:$rootProject.ext.pagingVersion"
    implementation "androidx.paging:paging-rxjava2:$rootProject.ext.pagingVersion"

    implementation "com.google.android.gms:play-services-location:$rootProject.ext.locationServicesVersion"
    implementation "com.github.drfonfon:android-geohash:$rootProject.ext.geoHashVersion"

    // Ads and consent management
    implementation "com.google.android.gms:play-services-ads:$rootProject.ext.playServicesAdsVersion"
    implementation "com.google.android.ump:user-messaging-platform:$rootProject.ext.userMessagingPlatformVersion"

    // Need Guava because adding Google Play Services Ads dependency messes up the ListenableFuture, see
    // https://github.com/google/ExoPlayer/issues/7993 for more info.
    implementation 'com.google.guava:guava:31.1-android'

    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:$rootProject.ext.coreLibraryDesugaringVersion"
}
